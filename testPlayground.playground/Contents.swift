import UIKit

//Все же знают автомобиль Тесла? Как вы, наверное, знаете, у него есть режим автопилота. Но если в системе происходит какой-либо сбой или поломка, машина сообщает об этом и просит перейти в ручной режим управления. Сегодня нам предстоит написать аналог системы, которая будет сообщать об ошибке в системе автопилота.

//Переменная, которая хранит в себе режим управления: ручной или автопилот. Если включен режим ручного управления, то будем считать, что автопилот отключен.

//Должно быть реализовано хранение каких-либо характеристик автомобиля, например:
//Масса: 2108 кг
//Длина: 4976 мм
//Ширина (с учетом боковых зеркал): 1963 мм
//Высота: 1435 мм
//Колесная база: 2959 мм
//Клиренс: 154.9 мм
//Объем багажника: 900 литров

//Должно быть реализовано хранение функционала машины. Обязательный функционал: управление музыкой, люком (степень его открытия измеряется в процентах), скорость вентилятора обдува, климатические установки для водительского места. На своё усмотрение вы можете добавить что-то ещё. Проявите фантазию!

//Должна быть реализована система обработки ошибок, которые могут произойти. Если сработала ошибка, то нужно вывести соответствующее сообщение в консоль, указать, какая именно ошибка, и как её можно решить. Например: потеря на дороге → нужно включить GPS, низкий заряд батареи → нужно сообщить об этом и отобразить ближайшую станцию подзарядки. Проявите фантазию!

//Параметров может быть неограниченное количество, но их нужно обрабатывать и выводить соответствующие сообщения в консоль. Желательно использовать do-catch, хотя и необязательно, т.к. данная тема в полном объёме не была пройдена, однако какие-то базовые вещи в данном модуле были даны.

//Если пользователь включает какую-либо функцию, например, тот же автопилот, должно выводиться сообщение о том, что это может быть опасно для водителя, и нужно следить за движением автомобиля.


// характеристики автомобиля
let mass: Double = 2108 // масса в килограммах
let length: Double = 4976 // длина в миллиметрах
let width: Double = 1963 //  ширина (с учетом боковых зеркал) в миллиметрах
let height:Double = 1435 // высота в миллиметрах
let wheelBase:Double = 2959 // колесная база в миллиметрах
let cleerance: Double = 154.9 // клиренс в миллиметрах
let trunkVolume = 900.0 // объем багажника в литрах
var percentage = 100

// функционал машины
var isGpsOn: Bool = false // включение GPS
var isAutoPilotOn: Bool = true // режим автопилота, по-умолчанию, влючен; если выключен, то включен режим ручного управления
var energySafe: Bool = false // режим энергосбережения

// перечень ошибок
enum AutoError: Error {
    case isLost // заблудился
    case lowBattery // низкая батарея
    case brokeAutoDrive // проблемы с управлением машины
}

// задание ситуации
var isLost: Bool = false
// var lowBattery: Bool = false
var brokeAutoDrive: Bool = true

// процент зарядки


// обработка ошибок
func autoDrive() throws {
    if isLost {
        isGpsOn = true
        throw AutoError.isLost
    }
 
    if lowBattery {
        throw AutoError.lowBattery
    }
 
    if brokeAutoDrive {
        isAutoPilotOn = false
        throw AutoError.brokeAutoDrive
    }
}
 
do {
    try autoDrive()
} catch AutoError.isLost {
    print("Вы заблудились! Включаю GPS")
} catch AutoError.lowBattery {
    print("Батарея садится! Ближайшая станция подзарядки через 1 км 300 м")
} catch AutoError.brokeAutoDrive {
    print("Режим автопилота поврежден. Переходим в режим ручного управления!")
}
